/*
 * SASS SMACSS boilerplate v1.0
 * Inspired by Jonathan Snook : http://smacss.com
 * Author: @maxime beaudoin
 * Date: May 11 2014
 *
 * Doc : https://github.com/justinmwatts/SMACSS // http://smacss.com
 */

/* TOOL */

.container {
  max-width: 1000px;
  margin-right: auto;
  margin-left: auto;
  padding-left: 0;
  padding-right: 0;
}

.row {
  *zoom: 1;
  margin-left: -15px;
  margin-right: -15px;
}

.row:before,
.row:after {
  content: '';
  display: table;
}

.row:after {
  clear: both;
}

/* BASE */

/* normalize.css v3.0.1 | MIT License | git.io/normalize */

html {
  font-family: sans-serif;
  /* 1 */
  -ms-text-size-adjust: 100%;
  /* 2 */
  -webkit-text-size-adjust: 100%;
  /* 2 */
}

body {
  margin: 0;
}

article,
aside,
details,
figcaption,
figure,
footer,
header,
hgroup,
main,
nav,
section,
summary {
  display: block;
}

audio,
canvas,
progress,
video {
  display: inline-block;
  /* 1 */
  vertical-align: baseline;
  /* 2 */
}

audio:not([controls]) {
  display: none;
  height: 0;
}

[hidden],
template {
  display: none;
}

a {
  background: transparent;
}

a:active,
a:hover {
  outline: 0;
}

abbr[title] {
  border-bottom: 1px dotted;
}

b,
strong {
  font-weight: bold;
}

dfn {
  font-style: italic;
}

h1 {
  font-size: 2em;
  margin: 0.67em 0;
}

mark {
  background: #ff0;
  color: #000;
}

small {
  font-size: 80%;
}

sub,
sup {
  font-size: 75%;
  line-height: 0;
  position: relative;
  vertical-align: baseline;
}

sup {
  top: -0.5em;
}

sub {
  bottom: -0.25em;
}

img {
  border: 0;
}

svg:not(:root) {
  overflow: hidden;
}

figure {
  margin: 1em 40px;
}

hr {
  box-sizing: content-box;
  height: 0;
}

pre {
  overflow: auto;
}

code,
kbd,
pre,
samp {
  font-family: monospace, monospace;
  font-size: 1em;
}

button,
input,
optgroup,
select,
textarea {
  color: inherit;
  /* 1 */
  font: inherit;
  /* 2 */
  margin: 0;
  /* 3 */
}

button {
  overflow: visible;
}

button,
select {
  text-transform: none;
}

button,
html input[type="button"],
input[type="reset"],
input[type="submit"] {
  -webkit-appearance: button;
  /* 2 */
  cursor: pointer;
  /* 3 */
}

button[disabled],
html input[disabled] {
  cursor: default;
}

button::-moz-focus-inner,
input::-moz-focus-inner {
  border: 0;
  padding: 0;
}

input {
  line-height: normal;
}

input[type="checkbox"],
input[type="radio"] {
  box-sizing: border-box;
  /* 1 */
  padding: 0;
  /* 2 */
}

input[type="number"]::-webkit-inner-spin-button,
input[type="number"]::-webkit-outer-spin-button {
  height: auto;
}

input[type="search"] {
  -webkit-appearance: textfield;
  /* 1 */
  /* 2 */
  box-sizing: content-box;
}

input[type="search"]::-webkit-search-cancel-button,
input[type="search"]::-webkit-search-decoration {
  -webkit-appearance: none;
}

fieldset {
  border: 1px solid #c0c0c0;
  margin: 0 2px;
  padding: 0.35em 0.625em 0.75em;
}

legend {
  border: 0;
  /* 1 */
  padding: 0;
  /* 2 */
}

textarea {
  overflow: auto;
}

optgroup {
  font-weight: bold;
}

table {
  border-collapse: collapse;
  border-spacing: 0;
}

td,
th {
  padding: 0;
}

html,
body {
  background: #fff;
  margin: 0 auto;
  padding: 0;
  border: 0;
  text-rendering: optimizeLegibility;
  -webkit-font-smoothing: antialiased;
}

a {
  color: inherit;
}

/* FONTS */

/* LAYOUT */

/* MODULE */

* {
  margin: 0;
  padding: 0;
  box-sizing: border-box;
}

html {
  overflow-x: hidden;
  font-family: sans-serif;
  font-weight: bold;
  color: #fff;
  padding: 30px;
}

header {
  text-align: center;
  margin: 30px 0 60px;
}

figure {
  height: 100px;
  line-height: 100px;
  text-align: center;
  margin-top: 15px;
  margin-bottom: 15px;
}

figure figure {
  margin-top: 0;
  margin-bottom: 0;
}

section {
  margin-top: 30px;
  margin-bottom: 30px;
}

section:last-of-type {
  margin-bottom: 0;
}

section:nth-of-type(1) {
  background: #42cafd;
}

section:nth-of-type(1) figure {
  float: left;
  width: calc(100% * 1 - 30px);
  margin-left: 15px;
  margin-right: 15px;
  background: #22c1fd;
}

section:nth-of-type(2) {
  background: #66b3ba;
}

section:nth-of-type(2) figure {
  float: left;
  width: calc(100% * 0.333333333333333 - 30px);
  margin-left: 15px;
  margin-right: 15px;
  background: #52a9b1;
}

section:nth-of-type(2) figure:first-child {
  margin-left: calc(100% * 0.333333333333333 + (30px / 2));
}

section:nth-of-type(3) {
  background: #8eb19d;
}

section:nth-of-type(3) figure {
  float: left;
  width: calc(100% * 0.333333333333333 - 30px);
  margin-left: 15px;
  margin-right: 15px;
  background: #7ba48d;
}

section:nth-of-type(3) figure .row {
  *zoom: 1;
  margin-left: -15px;
  margin-right: -15px;
}

section:nth-of-type(3) figure .row:before,
section:nth-of-type(3) figure .row:after {
  content: '';
  display: table;
}

section:nth-of-type(3) figure .row:after {
  clear: both;
}

section:nth-of-type(3) figure figure {
  float: left;
  width: calc(100% * 0.5 - 30px);
  margin-left: 15px;
  margin-right: 15px;
  background: #68977c;
}

section:nth-of-type(4) {
  background: #f6efa6;
}

section:nth-of-type(4) figure {
  float: left;
  width: calc(100% * 0.5 - 30px);
  margin-left: 15px;
  margin-right: 15px;
  background: #f2e881;
}

section:nth-of-type(5) {
  background: #f0d2d1;
  height: 300px;
}

section:nth-of-type(5) figure {
  float: left;
  width: calc(100% * 0.333333333333333 - 30px);
  margin-left: 15px;
  margin-right: 15px;
  background: #e5b1af;
  margin-bottom: 0;
}

section:nth-of-type(6) {
  background: #f19a3e;
}

section:nth-of-type(6) figure {
  float: left;
  width: calc(100% * 1 - 30px);
  margin-left: 15px;
  margin-right: 15px;
  height: auto;
  line-height: 25px;
  font-weight: normal;
  padding: 15px;
  background: #ef8b22;
}

/* STATE */

/* THEME */

/*# sourceMappingURL=data:application/json;base64, */

@media only screen and (min-width: 500px) {
  section:nth-of-type(1) figure {
    float: left;
    width: calc(100% * 0.5 - 30px);
    margin-left: 15px;
    margin-right: 15px;
  }

  section:nth-of-type(6) figure {
    float: left;
    width: calc(100% * 0.5 - 30px);
    margin-left: 15px;
    margin-right: 15px;
  }

  section:nth-of-type(6) figure:nth-child(n) {
    clear: none;
  }

  section:nth-of-type(6) figure:nth-child(2n + 1) {
    clear: both;
  }
}

@media only screen and (min-width: 800px) {
  section:nth-of-type(1) figure {
    float: left;
    width: calc(100% * 0.333333333333333 - 30px);
    margin-left: 15px;
    margin-right: 15px;
  }

  section:nth-of-type(4) figure:first-child {
    position: relative;
    left: calc(100% * 0.5);
  }

  section:nth-of-type(4) figure:last-child {
    position: relative;
    left: calc(100% * -0.5);
  }

  section:nth-of-type(6) figure {
    float: left;
    width: calc(100% * 0.333333333333333 - 30px);
    margin-left: 15px;
    margin-right: 15px;
  }

  section:nth-of-type(6) figure:nth-child(n) {
    clear: none;
  }

  section:nth-of-type(6) figure:nth-child(3n + 1) {
    clear: both;
  }
}

@media only screen and (min-width: 1100px) {
  section:nth-of-type(1) figure {
    float: left;
    width: calc(100% * 0.25 - 30px);
    margin-left: 15px;
    margin-right: 15px;
  }

  section:nth-of-type(6) figure {
    float: left;
    width: calc(100% * 0.25 - 30px);
    margin-left: 15px;
    margin-right: 15px;
  }

  section:nth-of-type(6) figure:nth-child(n) {
    clear: none;
  }

  section:nth-of-type(6) figure:nth-child(4n + 1) {
    clear: both;
  }
}